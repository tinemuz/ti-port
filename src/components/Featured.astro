---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import { formatDate, truncateTitle } from "../util/utils";
import Tag from "./Tag_Featured.astro";

const allWriting: CollectionEntry<"writing">[] = (
  await getCollection("writing")
).sort(
  (a: CollectionEntry<"writing">, b: CollectionEntry<"writing">) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const tagWriting = allWriting.filter((writing) =>
  writing.data.tags.includes("featured")
);

// Define the type for the previousIndex parameter
function getUniqueIndex(previousIndex: number): number {
  // Array of possible indices
  const indices: number[] = [0, 1, 2];
  // Remove the previous index from the possible choices
  const remainingIndices = indices.filter((index) => index !== previousIndex);
  // Randomly select one of the remaining indices
  const randomIndex =
    remainingIndices[Math.floor(Math.random() * remainingIndices.length)];
  return randomIndex;
}
---

<div class="">
  <div class="w-full flex-grow sm:max-w-[812px]">
    {
      (() => {
        let lastIndex: number | null = null;

        return tagWriting.map((writing) => {
          const currentIndex = getUniqueIndex(
            lastIndex !== null ? lastIndex : -1
          );
          lastIndex = currentIndex;

          return (
            <div class="border-mgray grid grid-cols-3">
              {[0, 1, 2].map((index) => (
                <div class="">
                  <div class="relative w-full">
                    {index === currentIndex ? (
                      <div class="flex-col p-1 sm:p-2">
                        <div class="overflow-hidden">
                          <a href={"/writing/" + writing.slug}>
                            <Image
                              transition:name={writing.data.cover.path.src}
                              class="aspect-square w-full object-cover transition-transform duration-200 ease-in-out hover:scale-105"
                              src={writing.data.cover.path}
                              alt={writing.data.cover.alt}
                              loading="eager"
                            />
                          </a>
                        </div>

                        <div class="mx-0.5  text-[0.45rem] leading-[0.6rem] sm:text-xs">
                          <div class="flex items-center justify-between font-mono pt-2 pb-1 sm:pt-3 sm:pb-2">
                            <p>{formatDate(writing.data.pubDate)}</p>
                            <Tag tags={writing.data.tags.slice(0, 1)} />
                          </div>

                          <p class="">
                            <span>{writing.data.title} ~ </span>
                            <span class="italic">
                              {writing.data.description}
                            </span>
                          </p>
                        </div>
                      </div>
                    ) : null}
                  </div>
                </div>
              ))}
            </div>
          );
        });
      })()
    }
  </div>
</div>
