---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import { formatDate, truncateTitle } from "../util/utils";
import Tag from "./Tag_Featured.astro";

const allWriting: CollectionEntry<"writing">[] = (
  await getCollection("writing")
).sort(
  (a: CollectionEntry<"writing">, b: CollectionEntry<"writing">) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const tagWriting = allWriting.filter((writing) =>
  writing.data.tags.includes("featured")
);

// Define the type for the previousIndex parameter
function getUniqueIndex(previousIndex: number): number {
  // Array of possible indices
  const indices: number[] = [0, 1, 2];
  // Remove the previous index from the possible choices
  const remainingIndices = indices.filter((index) => index !== previousIndex);
  // Randomly select one of the remaining indices
  const randomIndex =
    remainingIndices[Math.floor(Math.random() * remainingIndices.length)];
  return randomIndex;
}
---

<div class="">
  <div class="w-full flex-grow sm:max-w-[812px]">
    {
      (() => {
        let lastIndex: number | null = null;

        return tagWriting.map((writing) => {
          const currentIndex = getUniqueIndex(
            lastIndex !== null ? lastIndex : -1
          );
          lastIndex = currentIndex;

          return (
            <div class="border-mgray grid grid-cols-3">
              {[0, 1, 2].map((index) => (
                <div class=" rounded-lg ">
                  <div class="relative w-full">
                    {index === currentIndex ? (
                      <div class="flex-col rounded-[0.8rem] border border-skin-border border-opacity-50 bg-skin-bg-sub2 p-1 sm:rounded-[1.3rem] sm:p-2">
                        <div class="overflow-hidden rounded-[0.55rem] sm:rounded-[0.85rem]">
                          <a href={"/writing/" + writing.slug}>
                            <Image
                              transition:name={writing.data.cover.path.src}
                              class="w-full rounded-[0.55rem] object-cover transition-transform duration-200 ease-in-out hover:scale-105 sm:rounded-[0.85rem]"
                              src={writing.data.cover.path}
                              alt={writing.data.cover.alt}
                              loading="eager"
                            />
                          </a>
                        </div>

                        <div class="mx-1 font-mono text-[0.35rem] leading-3 sm:text-xs md:text-sm">
                          <div class="flex h-[1.2rem] items-center justify-between sm:h-8">
                            <p>{formatDate(writing.data.pubDate)}</p>

                            <Tag tags={writing.data.tags.slice(0, 1)} />
                          </div>
                          <p class="">
                            {truncateTitle(
                              writing.data.title.concat(
                                " - ",
                                writing.data.description
                              )
                            )}
                          </p>
                        </div>
                      </div>
                    ) : null}
                  </div>
                </div>
              ))}
            </div>
          );
        });
      })()
    }
  </div>
</div>
