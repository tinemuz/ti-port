---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import { formatDate, truncateTitle } from "../util/utils";
import Tag from "./Tag_Featured.astro";

const allWriting: CollectionEntry<"writing">[] = (
  await getCollection("writing")
).sort(
  (a: CollectionEntry<"writing">, b: CollectionEntry<"writing">) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const tagWriting = allWriting.filter((writing) =>
  writing.data.tags.includes("featured")
);

// Define a fixed order (array values are from 1 to 3)
const displayOrder = [1, 3, 2];

// Check if displayOrder length matches the number of featured writings
if (displayOrder.length !== tagWriting.length) {
  throw new Error(
    `The displayOrder array length (${displayOrder.length}) does not match the number of featured items (${tagWriting.length}).`
  );
}

// Check if displayOrder contains only values 1, 2, or 3
if (!displayOrder.every((value) => [1, 2, 3].includes(value))) {
  throw new Error(
    `The displayOrder array contains invalid values. Only values 1, 2, and 3 are allowed. Received: [${displayOrder.join(
      ", "
    )}]`
  );
}
---

<div class="w-full flex-grow sm:max-w-[812px]">
  {
    tagWriting.map((writing, index) => {
      // No wrapping: Just use the corresponding displayOrder index
      const currentIndex = displayOrder[index] - 1;

      return (
        <div class="border-mgray grid grid-cols-3">
          {[0, 1, 2].map((i) => (
            <div class="">
              <div class="relative w-full">
                {i === currentIndex ? (
                  <div class="flex-col p-1 sm:p-2">
                    <div class="overflow-hidden">
                      <a href={"/writing/" + writing.slug}>
                        <Image
                          transition:name={writing.data.cover.path.src}
                          class="aspect-square w-full object-cover transition-transform duration-200 ease-in-out hover:scale-105"
                          src={writing.data.cover.path}
                          alt={writing.data.cover.alt}
                          loading="eager"
                        />
                      </a>
                    </div>

                    <div class="mx-0.5 text-[0.45rem] leading-[0.6rem] sm:text-xs">
                      <div class="flex items-center justify-between pb-1 pt-2 font-mono sm:pb-2 sm:pt-3">
                        <p>{formatDate(writing.data.pubDate)}</p>
                        <Tag tags={writing.data.tags.slice(0, 1)} />
                      </div>

                      <p>
                        <span>{writing.data.title} ~ </span>
                        <span class="italic">{writing.data.description}</span>
                      </p>
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
          ))}
        </div>
      );
    })
  }
</div>
