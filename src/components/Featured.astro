---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import { formatDate, truncateTitle } from "../util/utils";
import Tag from "./Tag_Featured.astro";
import TagDot from "./TagDot.astro";

const allwords: CollectionEntry<"words">[] = (
  await getCollection("words")
).sort(
  (a: CollectionEntry<"words">, b: CollectionEntry<"words">) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const tagWords = allwords.filter((words) =>
  words.data.tags.includes("featured")
);

// Define a fixed order (array values are from 1 to 3)
const displayOrder = [1, 3, 2, 3];

// Throw an error if the lengths do not match
if (displayOrder.length !== tagWords.length) {
  throw new Error(
    `Mismatch: displayOrder length (${displayOrder.length}) does not match the number of featured items (${tagWords.length}).`
  );
}
---

<div class="w-full flex-grow sm:max-w-[812px]">
  {
    tagWords.map((words, index) => {
      // No wrapping: Just use the corresponding displayOrder index
      const currentIndex = displayOrder[index] - 1;

      return (
        <div class="border-mgray grid grid-cols-3">
          {[0, 1, 2].map((i) => (
            <div class="">
              <div class="relative w-full">
                {i === currentIndex ? (
                  <div class="flex-col p-0.5 sm:p-1">
                    <div class="rounded-lg border border-skin-border bg-skin-bg-sub p-1 sm:rounded-[1.1rem] sm:p-2">
                      <div class="overflow-hidden rounded-[0.25rem] sm:rounded-[0.6rem]">
                        <a href={"/words/" + words.slug}>
                          <Image
                            class="aspect-square w-full object-cover transition-transform duration-200 ease-in-out hover:scale-105"
                            src={words.data.cover.path}
                            alt={words.data.cover.alt}
                            loading="eager"
                          />
                        </a>
                      </div>

                      <div class="mx-0.5 text-[0.45rem] leading-[0.6rem] pb-2 sm:text-xs">
                        <p class="pt-2">
                          <span>{words.data.title} ~ </span>
                          <span class="italic">{words.data.description}</span>
                        </p>
                      </div>
                      <TagDot tags={words.data.tags.slice(0, 1)} />
                      {/* <div class="flex items-center justify-between sm:pt-3">
                        <Tag tags={words.data.tags} />
                      </div> */}
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
          ))}
        </div>
      );
    })
  }
</div>
