---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import { formatDate, truncateTitle } from "../util/utils";

const allWriting: CollectionEntry<"writing">[] = (
  await getCollection("writing")
).sort(
  (a: CollectionEntry<"writing">, b: CollectionEntry<"writing">) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
const tagWriting = allWriting.filter((writing) =>
  writing.data.tags.includes("featured")
);

// Define the type for the previousIndex parameter
function getUniqueIndex(previousIndex: number): number {
  // Array of possible indices
  const indices: number[] = [0, 1, 2];
  // Remove the previous index from the possible choices
  const remainingIndices = indices.filter((index) => index !== previousIndex);
  // Randomly select one of the remaining indices
  const randomIndex =
    remainingIndices[Math.floor(Math.random() * remainingIndices.length)];
  return randomIndex;
}

function shuffleArray<T>(array: T[]): T[] {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

const shuffledTagWriting = shuffleArray(tagWriting);
---

<div class="">
  <div class="w-full flex-grow md:max-w-[812px]">
    {
      (() => {
        let lastIndex: number | null = null;
        let isFirstItem = true;

        return shuffledTagWriting.map((writing, index) => {
          const currentIndex = getUniqueIndex(
            lastIndex !== null ? lastIndex : -1
          );
          lastIndex = currentIndex;

          const borderTopClass = isFirstItem ? "" : "border-t-0";
          isFirstItem = false;

          return (
            <div
              class={`grid grid-cols-3 border border-mgray ${borderTopClass}`}
            >
              {[0, 1, 2].map((index) => (
                <div class={`border-mgray ${index === 2 ? "" : "border-r"}`}>
                  <div class="h-5  border-b border-mgray">
                    {index === currentIndex ? (
                      <div class="mx-1 flex h-full items-center justify-between text-[6px] md:text-xs">
                        <p>{truncateTitle(writing.data.title).toUpperCase()}</p>
                        <p>{formatDate(writing.data.pubDate).toUpperCase()}</p>
                      </div>
                    ) : null}
                  </div>
                  <div class="aspect-square">
                    <div class="relative w-full pb-[100%]">
                      {index === currentIndex ? (
                        <a href={"/writing/" + writing.slug}>
                          <Image
                            transition:name={writing.data.images[0].path.src}
                            class="absolute inset-0 h-full w-full object-cover"
                            src={writing.data.images[0].path}
                            alt={writing.data.images[0].alt}
                          />
                        </a>
                      ) : null}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          );
        });
      })()
    }
  </div>
</div>
